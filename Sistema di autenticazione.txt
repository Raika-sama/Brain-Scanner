# Documentazione Sistema di Autenticazione - Brain Scanner

## 1. Panoramica del Sistema
Il sistema di autenticazione di Brain Scanner utilizza JWT (JSON Web Token) con una gestione centralizzata attraverso custom hooks React.

### 1.1 Componenti Principali
- **Frontend**: 
  - React (client)
  - useAuth hook personalizzato
  - Protected Routes
  - Context API per stato globale
- **Backend**: Node.js/Express
- **Storage**: localStorage del browser
- **Middleware**: JWT-based
- **Database**: MongoDB Atlas

## 2. Implementazione Frontend

### 2.1 Hook useAuth
```javascript
// src/hooks/useAuth.js
export const useAuth = () => {
  const { dispatch } = useApp();
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const login = useCallback(async (email, password, rememberMe) => {
    // Implementazione login con gestione token e stato
  });

  const register = useCallback(async (userData) => {
    // Implementazione registrazione
  });

  const logout = useCallback(() => {
    // Pulizia token e stato
  });

  return { login, register, logout, isLoading, error };
};
2.2 Protected Route
JavaScript
// src/components/ProtectedRoute.js
export const ProtectedRoute = ({ children }) => {
  const { user, isLoading } = useAuth();
  const location = useLocation();

  if (isLoading) return <LoadingSpinner />;
  
  if (!user) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  return children;
};
2.3 App Context
JavaScript
// src/context/AppContext.js
const initialState = {
  user: JSON.parse(localStorage.getItem('userData')) || null,
  loading: false,
  error: null
};

const appReducer = (state, action) => {
  switch (action.type) {
    case 'SET_USER':
      return { ...state, user: action.payload };
    // Altri cases...
  }
};
2.4 Struttura Route
JavaScript
// src/App.js
<Routes>
  {/* Route pubbliche */}
  <Route path="/login" element={<LoginPage />} />
  <Route path="/forgot-password" element={<PlaceholderPage pageName="Recupero Password" />} />

  {/* Route protette */}
  <Route path="/" element={
    <ProtectedRoute>
      <MainLayout />
    </ProtectedRoute>
  }>
    <Route path="dashboard" element={<Dashboard />} />
    {/* Altre route protette */}
  </Route>
</Routes>
3. Gestione Token
3.1 Axios Interceptors
JavaScript
// src/utils/axios.js
axios.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

axios.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('token');
      localStorage.removeItem('userData');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);
4. Sicurezza Implementata
4.1 Frontend
Gestione token in localStorage
Protezione route con ProtectedRoute
Gestione errori centralizzata
Loading states per feedback utente
Toast notifications per feedback
Logout automatico su token invalido
4.2 Integrazione con Backend
Header Authorization Bearer
Gestione errori 401
Reindirizzamento automatico al login
Refresh token non implementato (TODO)
5. Funzionalit√† Disponibili
5.1 Autenticazione
Login con email/password
Registrazione nuovo utente
Logout con pulizia stato
Remember me option
Protezione route
5.2 Gestione Stati
Loading states
Error handling
User context
Toast notifications
6. TODO List
Implementare password recovery
Aggiungere refresh token
Implementare remember me lato server
Aggiungere rate limiting frontend
Implementare session tracking
Aggiungere two-factor authentication
Implementare sistema di testing completo
   - Unit test per hooks
   - Test componenti React
   - Test di integrazione
   - E2E testing

7. Best Practices Implementate
Gestione centralizzata stato auth
Protected routes
Error boundaries
Loading states
Toast notifications
Clean logout
Axios interceptors
Context API per stato globale
8. Note per Sviluppatori
Usare sempre ProtectedRoute per nuove route private
Gestire sempre loading states
Utilizzare toast per feedback utente
Implementare error handling
Mantenere consistenza localStorage/context